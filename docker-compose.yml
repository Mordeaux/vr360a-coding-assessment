services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vr360a_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - 5173:5173
    environment:
      BACKEND_URL:
      
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vr360a_backend
    volumes:
      - ./backend:/app
      - /app/target
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - backend
      - db
    environment:
      DATABASE_URL:
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:8000 || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    volumes:
     - /var/lib/postgresql/data
    networks:
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  host_mode:
    build:
      context: ./data_collector
      dockerfile: Dockerfile
    container_name: vr360a_data_collector_host
    environment:
      DATA_COLLECTOR_UPDATE_INTERVAL:
      DATA_COLLECTOR_HOST_MODE: 1
    networks:
      - data_collector
      - backend
    depends_on:
      backend:
        condition: service_healthy
        restart: true

  client_mode:
    build:
      context: ./data_collector
      dockerfile: Dockerfile
    container_name: vr360a_data_collector_client_1
    networks:
      - data_collector
    environment:
      DATA_COLLECTOR_UPDATE_INTERVAL:
      DATA_COLLECTOR_HOST:
    depends_on:
      - host_mode

  client_mode2:
    build:
      context: ./data_collector
      dockerfile: Dockerfile
    container_name: vr360a_data_collector_client_2
    networks:
      - data_collector
    environment:
      DATA_COLLECTOR_UPDATE_INTERVAL:
      DATA_COLLECTOR_HOST:
    depends_on:
      - host_mode

networks:
  db:
  backend:
  data_collector:
    internal: true
